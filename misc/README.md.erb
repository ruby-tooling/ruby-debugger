[![Ruby](https://github.com/ruby/debug/actions/workflows/ruby.yml/badge.svg?branch=master)](https://github.com/ruby/debug/actions/workflows/ruby.yml?query=branch%3Amaster) [![Protocol](https://github.com/ruby/debug/actions/workflows/protocol.yml/badge.svg)](https://github.com/ruby/debug/actions/workflows/protocol.yml)

# debug.rb

This library provides debugging functionality to Ruby (MRI) 2.6 and later.

This debug.rb is replacement of traditional lib/debug.rb standard library which is implemented by `set_trace_func`.
New debug.rb has several advantages:

- Fast: No performance penalty on non-stepping mode and non-breakpoints.
- [Remote debugging](#remote-debugging): Support remote debugging natively.
  - [UNIX domain socket](/docs/remote_debugging.md#invoke-program-as-a-remote-debuggee)
  - [TCP/IP](/docs/remote_debugging.md#tcpip)
  - Integration with rich debugger frontend
    - [VSCode](/docs/remote_debugging.md#vscode) (or other DAP supporting clients)
    - [Chrome DevTools](/docs/remote_debugging.md#chrome-devtool-integration) (or other CDP supporting clients)
- Flexible: Users can use the debugger in multiple ways
  - Through requiring files
  - Through the `rdbg` executable
  - Through Ruby APIs

# Installation

```
$ gem install debug
```
If you use Bundler, write the following line to your Gemfile.

```rb
gem "debug", ">= 1.0.0"
```

# Usage

The debugger is designed to support a wide range of use cases, so you have many ways to use it.

But essentially, it consists of 4 steps:

1. [Activate the debugger in your program](#activate-the-debugger-in-your-program)
1. Set breakpoints
    - Through [`binding.break`](#the-bindingbreak-method)
    - [Breakpoint commands](#breakpoint)
1. Execute/continue your program and wait for it to hit the breakpoints
1. Start debugging
    - Here's the [full command list](#console-commands)
    - You can also type `help` or `help <command>` in the console to see commands

> **Note**
> If you want to use remote console or VSCode/Chrome integration, the steps will be slightly different. Please also check the [remote debugging guide](/docs/remote_debugging.md) as well.

## Common Usges

Here are the 2 most common usages of the debugger:

### Start with `require` (similar to `byebug` or `pry` use cases)
  1.
      ```rb
      require "debug"
      ```
  1.
      ```rb
      # somewhere in your program
      def target_method
        binding.break
      end
      ```
  1. When the program executes `target_method`, debugger will stop it and open up a console

### Start with `rdbg` command
  1.
      ```shell
      $ bundle exec rdbg -c -- <cmd to start my program> # this will immediately open up a console
      ```
  1. Set a breakpoint in the console - e.g. type `break my_file:6`
  1. Continue the program - e.g. type `continue`
  1. When the program reaches the location, debugger will stop it and open up a console

## VSCode Integration

A big enhancement of the debugger is its built-in integration with VSCode. Please check the dedicated [VSCode section](/docs/remote_debugging.md#vscode) for more information.

## Activate the debugger in your program

As mentioned earlier, you can use various ways to integrate the debugger with your program.

So in addition to the 2 most common cases, here's a more detailed breakdown:

Start at program start | `rdbg` | require | debugger API (after `require "debug/session"`)
---|---|---|---|
Yes | `rdbg` | `require "debug/start"` | `DEBUGGER__.start`
No | `rdbg --nonstop` | `require "debug"` | `DEBUGGER__.start(nonstop: true)`

### The `rdbg` executable

You can also start your program with the `rdbg` executable, which will enter a debugging session at the beginning of your program by default.

If you don't want to stop your program until it hits a breakpoint, you can use `rdbg --nonstop` instead (or `-n` for short).

If you want to run a command written in Ruby like like `rake`, `rails`, `bundle`, `rspec` and so on, you can use `rdbg -c` option.

- Without `-c` option, `rdbg <name>` expects `<name>` to be a Ruby script and invokes it like `ruby <name>` with the debugger.
- With `-c` option, `rdbg -c <name>` expects `<name>` be be command in `PATH` and simply invoke it with the debugger.

Examples:
- `rdbg target.rb`
- `rdbg -c -- rails server`
- `rdbg -c -- bundle exec ruby foo.rb`
- `rdbg -c -- bundle exec rake test`
- `rdbg -c -- ruby target.rb` is same as `rdbg target.rb`

> **Note**
> `--` is needed to separate the command line options for `rdbg` and invoking command. For example, `rdbg -c rake -T` is recognized like `rdbg -c -T -- rake`. It should be `rdbg -c -- rake -T`.

> **Note**
> If you want to use bundler (`bundle` command), you need to write `gem debug` line in your `Gemfile`.

## The `binding.break` method

`binding.break` (and its aliases `binding.b` and `debugger`) set breakpoints at the written line. It also has several keywords:

- If `do: 'command'` is specified, the debugger will

    1. Stop the program
    1. Run the `command` as a debug command
    1. Continue the program.

    It is useful if you only want to call a debug command and don't want to stop there.

    ```rb
    def initialize
      @a = 1
      binding.b do: 'watch @a'
    end
    ```

    In this case, the debugger will register a watch breakpoint for `@a` and continue to run.

- If `pre: 'command'` is specified, the debugger will
    1. Stop the program
    1. Run the `command` as a debug command
    1. Keep the console open

    It is useful if you have repeated operations to perform before the debugging at the breakpoint

    ```rb
    def foo
      binding.b pre: 'info locals'
      ...
    end
    ```

    In this case, the debugger will display local variable information automatically so you don't need to type it repeatedly.

# Remote debugging

You can use this debugger as a remote debugger. For example, it will help the following situations:

- Your application does not run on TTY and it is hard to use `binding.pry` or `binding.irb`.
  - Your application is running on Docker container and there is no TTY.
  - Your application is running as a daemon.
  - Your application uses pipe for STDIN or STDOUT.
- Your application is running as a daemon and you want to query the running status (checking a backtrace and so on).
- You want to use different debugger clients, like VSCode or Chrome DevTools.

To learn more about remote debugging, please visit [the remote debugging guide](docs/remote_debugging.md).

# Console commands

In the debug console, you can use the following debug commands.

There are additional features:

- `<expr>` without debug command is almost same as `pp <expr>`.
  - If the input line `<expr>` does *NOT* start with any debug command, the line `<expr>` will be evaluated as a Ruby expression and the result will be printed with `pp` method. So that the input `foo.bar` is same as `pp foo.bar`.
  - If `<expr>` is recognized as a debug command, of course it is not evaluated as a Ruby expression, but is executed as debug command. For example, you can not evaluate such single letter local variables `i`, `b`, `n`, `c` because they are single letter debug commands. Use `p i` instead.
- `Enter` without any input repeats the last command (useful when repeating `step`s).
- `Ctrl-D` is equal to `quit` command.
- [debug command compare sheet - Google Sheets](https://docs.google.com/spreadsheets/d/1TlmmUDsvwK4sSIyoMv-io52BUUz__R5wpu-ComXlsw0/edit?usp=sharing)

You can use the following debug commands. Each command should be written in 1 line.
The `[...]` notation means this part can be eliminate. For example, `s[tep]` means `s` or `step` are valid command. `ste` is not valid.
The `<...>` notation means the argument.

<%= DEBUGGER__.help %>

# Configuration

You can configure the debugger's behavior with the `config` command and environment variables.

Every configuration has a corresponding environment variable, for example:

```
config set log_level INFO # RUBY_DEBUG_LOG_LEVEL=INFO
config set no_color true  # RUBY_DEBUG_NO_COLOR=true
```

<% cat = nil; DEBUGGER__::CONFIG_SET.each do |key, (env, desc, _, default)| %>
<% /\A(\w+): (.+)/ =~ desc; if cat != $1; cat = 1 %>
- <%= $1 %>
<% cat = $1; end %>  - `<%= env %>` (`<%= key %>`): <%= default ? "#{$2} (default: #{default})" : $2 %><% end %>

## Initialization scripts

If you want to run certain commands or set configurations for every debugging session automatically, you can put them into the `~/.rdbgrc` file.

If you want to run additional initial scripts, you can also,

- Use `RUBY_DEBUG_INIT_SCRIPT` environment variable can specify the initial script file.
- Specify the initial script with `rdbg -x initial_script`.

Initial scripts are useful to write your favorite configurations.  For example,

```
config set use_short_path true # Use $(Gem)/gem_content to replace the absolute path of gem files
```

Finally, you can also write the initial script in Ruby with the file name `~/.rdbgrc.rb`.

## rdbg command help

```
<%= `exe/rdbg --help` %>
```

# Contributing

Bug reports and pull requests are welcome on GitHub at https://github.com/ruby/debug.
This debugger is not mature so your feedback will help us.

Please also check the [contributing guideline](/CONTRIBUTING.md).

# Acknowledgement

- Some tests are based on [deivid-rodriguez/byebug: Debugging in Ruby 2](https://github.com/deivid-rodriguez/byebug)
- Several codes in `server_cdp.rb` are based on [geoffreylitt/ladybug: Visual Debugger](https://github.com/geoffreylitt/ladybug)
